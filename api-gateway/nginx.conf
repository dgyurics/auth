events {
  worker_connections 1024;
}

http {
  # List of application servers
  upstream auth_servers {
    server auth:8080;
    # server auth_1:8080;
    # server auth_2:8080;
    # server auth_3:8080;
  }

  upstream api_servers {
    server secure:8080;
    # server secure_1:8080;
    # server secure_2:8080;
    # server secure_3:8080;
  }

  # Configuration for the server
  server {
    listen [::]:80; # ipv6
    listen 80;      # ipv4

    # Proxying the connections
    location /auth/ {
      rewrite ^/auth(/.*)$ $1 break; # Rewrite URI to remove "/auth" prefix
      proxy_pass http://auth_servers; # Forward rewritten URI to auth_servers
      proxy_connect_timeout 5s; # Timeout for establishing a connection with the upstream server
      proxy_send_timeout 10s; # Timeout for sending data to the upstream server
    }

    location /api/ {
      rewrite ^/api(/.*)$ $1 break; # Rewrite URI to remove "/api" prefix
      proxy_pass http://api_servers; # Forward rewritten URI to api_servers
      proxy_connect_timeout 5s; # Timeout for establishing a connection with the upstream server
      proxy_send_timeout 10s; # Timeout for sending data to the upstream server
    }
  }
}

# TODO - ssl
    # listen [::]:443 ssl http2; # ipv6
    # listen 443 ssl http2;      # ipv4
    # server_name example.com;

    # # SSL certificate configuration
    # ssl_certificate /path/to/cert.pem;
    # ssl_certificate_key /path/to/key.pem;

    # Proxying the connections
    # location /auth/ {
    # }

    # location /api/ {
    # }
  #   }
  # }


# TODO - health check
# health_check module will monitor the availability of your upstream servers and automatically 
# remove unhealthy servers from the pool
# http {
#   # List of application servers
#   upstream auth_servers {
#     server auth:8080 max_fails=3 fail_timeout=30s;
#     server auth1:8080 max_fails=3 fail_timeout=30s;
#     server auth2:8080 max_fails=3 fail_timeout=30s;
#   }

#   # Health check configuration
#   server {
#     listen 8081;
#     location /health_check {
#       access_log off;
#       return 200;
#     }
#   }

#   # Configuration for the server
#   server {
#     listen [::]:80; # ipv6
#     listen 80;      # ipv4

#     # Proxying the connections
#     location /auth/ {
#       rewrite ^/auth(/.*)$ $1 break; # Rewrite URI to remove "/auth" prefix
#       proxy_pass http://auth_servers; # Forward rewritten URI to auth_servers
#       proxy_connect_timeout 5s; # Timeout for establishing a connection with the upstream server
#       proxy_send_timeout 10s; # Timeout for sending data to the upstream server
#       health_check interval=5s timeout=3s rise=2 fall=3;
#     }
#   }
# }
